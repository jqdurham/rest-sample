//go:build go1.22

// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// BadRequest defines model for BadRequest.
type BadRequest = string

// Post defines model for Post.
type Post struct {
	// Content Post content
	Content string `json:"content"`
	Id      *int64 `json:"id,omitempty"`

	// Title Short headline of your post
	Title  string `json:"title"`
	UserId int64  `json:"user_id"`
}

// PostInput defines model for PostInput.
type PostInput struct {
	// Content Post content
	Content string `json:"content"`

	// Title Short headline of your post
	Title  string `json:"title"`
	UserId int64  `json:"user_id"`
}

// ResourceNotFound defines model for ResourceNotFound.
type ResourceNotFound = string

// User defines model for User.
type User struct {
	// Email Users email address
	Email string `json:"email"`
	Id    int64  `json:"id"`

	// Name Users full name
	Name string `json:"name"`
}

// UserInput defines model for UserInput.
type UserInput struct {
	// Email Users email address
	Email string `json:"email"`

	// Name Users full name
	Name string `json:"name"`
}

// PostBody defines model for PostBody.
type PostBody = PostInput

// UserBody defines model for UserBody.
type UserBody = UserInput

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody = PostInput

// UpdatePostJSONRequestBody defines body for UpdatePost for application/json ContentType.
type UpdatePostJSONRequestBody = PostInput

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserInput

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserInput

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /posts)
	ListPosts(w http.ResponseWriter, r *http.Request)

	// (POST /posts)
	CreatePost(w http.ResponseWriter, r *http.Request)

	// (DELETE /posts/{id})
	DeletePost(w http.ResponseWriter, r *http.Request, id int64)

	// (GET /posts/{id})
	GetPost(w http.ResponseWriter, r *http.Request, id int64)

	// (PUT /posts/{id})
	UpdatePost(w http.ResponseWriter, r *http.Request, id int64)

	// (GET /users)
	ListUsers(w http.ResponseWriter, r *http.Request)

	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)

	// (DELETE /users/{id})
	DeleteUser(w http.ResponseWriter, r *http.Request, id int64)

	// (GET /users/{id})
	GetUser(w http.ResponseWriter, r *http.Request, id int64)

	// (PUT /users/{id})
	UpdateUser(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListPosts operation middleware
func (siw *ServerInterfaceWrapper) ListPosts(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPosts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePost operation middleware
func (siw *ServerInterfaceWrapper) CreatePost(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePost operation middleware
func (siw *ServerInterfaceWrapper) DeletePost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePost(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPost operation middleware
func (siw *ServerInterfaceWrapper) GetPost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPost(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePost operation middleware
func (siw *ServerInterfaceWrapper) UpdatePost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePost(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/posts", wrapper.ListPosts)
	m.HandleFunc("POST "+options.BaseURL+"/posts", wrapper.CreatePost)
	m.HandleFunc("DELETE "+options.BaseURL+"/posts/{id}", wrapper.DeletePost)
	m.HandleFunc("GET "+options.BaseURL+"/posts/{id}", wrapper.GetPost)
	m.HandleFunc("PUT "+options.BaseURL+"/posts/{id}", wrapper.UpdatePost)
	m.HandleFunc("GET "+options.BaseURL+"/users", wrapper.ListUsers)
	m.HandleFunc("POST "+options.BaseURL+"/users", wrapper.CreateUser)
	m.HandleFunc("DELETE "+options.BaseURL+"/users/{id}", wrapper.DeleteUser)
	m.HandleFunc("GET "+options.BaseURL+"/users/{id}", wrapper.GetUser)
	m.HandleFunc("PUT "+options.BaseURL+"/users/{id}", wrapper.UpdateUser)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3fK/AQAA//8N3KuY7hwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
