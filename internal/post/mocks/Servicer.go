// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	post "github.com/jqdurham/rest-sample/internal/post"
	mock "github.com/stretchr/testify/mock"
)

// Servicer is an autogenerated mock type for the Servicer type
type Servicer struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: pst
func (_m *Servicer) CreatePost(pst *post.Post) (*post.Post, error) {
	ret := _m.Called(pst)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(*post.Post) (*post.Post, error)); ok {
		return rf(pst)
	}
	if rf, ok := ret.Get(0).(func(*post.Post) *post.Post); ok {
		r0 = rf(pst)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(*post.Post) error); ok {
		r1 = rf(pst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: id
func (_m *Servicer) DeletePost(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPost provides a mock function with given fields: id
func (_m *Servicer) GetPost(id int64) (*post.Post, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*post.Post, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *post.Post); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPosts provides a mock function with given fields:
func (_m *Servicer) ListPosts() []post.Post {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListPosts")
	}

	var r0 []post.Post
	if rf, ok := ret.Get(0).(func() []post.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]post.Post)
		}
	}

	return r0
}

// UpdatePost provides a mock function with given fields: id, pst
func (_m *Servicer) UpdatePost(id int64, pst *post.Post) (*post.Post, error) {
	ret := _m.Called(id, pst)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *post.Post) (*post.Post, error)); ok {
		return rf(id, pst)
	}
	if rf, ok := ret.Get(0).(func(int64, *post.Post) *post.Post); ok {
		r0 = rf(id, pst)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *post.Post) error); ok {
		r1 = rf(id, pst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServicer creates a new instance of Servicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Servicer {
	mock := &Servicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
