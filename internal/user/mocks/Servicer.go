// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	user "github.com/jqdurham/rest-sample/internal/user"
	mock "github.com/stretchr/testify/mock"
)

// Servicer is an autogenerated mock type for the Servicer type
type Servicer struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: usr
func (_m *Servicer) CreateUser(usr *user.User) (*user.User, error) {
	ret := _m.Called(usr)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.User) (*user.User, error)); ok {
		return rf(usr)
	}
	if rf, ok := ret.Get(0).(func(*user.User) *user.User); ok {
		r0 = rf(usr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(usr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *Servicer) DeleteUser(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: id
func (_m *Servicer) GetUser(id int64) (*user.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*user.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *user.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields:
func (_m *Servicer) ListUsers() []user.User {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []user.User
	if rf, ok := ret.Get(0).(func() []user.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	return r0
}

// UpdateUser provides a mock function with given fields: id, usr
func (_m *Servicer) UpdateUser(id int64, usr *user.User) (*user.User, error) {
	ret := _m.Called(id, usr)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *user.User) (*user.User, error)); ok {
		return rf(id, usr)
	}
	if rf, ok := ret.Get(0).(func(int64, *user.User) *user.User); ok {
		r0 = rf(id, usr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *user.User) error); ok {
		r1 = rf(id, usr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServicer creates a new instance of Servicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Servicer {
	mock := &Servicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
